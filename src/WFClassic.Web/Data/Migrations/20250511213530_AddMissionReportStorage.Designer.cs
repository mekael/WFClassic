// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WFClassic.Web.Data;

#nullable disable

namespace WFClassic.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250511213530_AddMissionReportStorage")]
    partial class AddMissionReportStorage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<long>("CurrentNonce")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CurrentlyLoggedIn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastLoginTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoginStreak")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("SteamId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalNumberOfDaysLoginCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BankAccountType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<long>("CurrentBalance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.BankAccountTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("BankAccountTransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemoCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankAccountsTransaction");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.FriendshipRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RequestAcceptedOrDeclinedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RequestorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("RequestorId");

                    b.ToTable("FriendshipRequests");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.InventoryBin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Extra")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryBinType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Slots")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryBins");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Charge")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExtraCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExtraRemaining")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InternalInventoryItemType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemType")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnlockLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpgradeFingerprint")
                        .HasColumnType("TEXT");

                    b.Property<int>("UpgradeVer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XP")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.InventoryItemAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AttachedInventoryItemId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentInventoryItemId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttachedInventoryItemId");

                    b.HasIndex("ParentInventoryItemId");

                    b.ToTable("InventoryItemAttachments");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.LoginTrackingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LoginTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LogoutTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<long>("Nonce")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("LoginTrackingItems");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.MetricItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<long>("AssociatedNonce")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("MetricType")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Seconds")
                        .HasColumnType("REAL");

                    b.Property<bool?>("Set")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("MetricItems");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("BestRatings")
                        .HasColumnType("REAL");

                    b.Property<int>("Completes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.MissionReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FullReport")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HostId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("MissionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MissionStartTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("Nonce")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MissionReports");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.PendingRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("EndingTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartingTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RecipeId");

                    b.ToTable("PendingRecipes");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.PersonRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonRelationshipType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonRelationships");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AdditionalPlayerXP")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentLoadout")
                        .HasColumnType("TEXT");

                    b.Property<string>("Founder")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerXP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReceivedStartingGear")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SubscribedToEmails")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.PlayerReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssociatedAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CredtBonus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeleeXpBonus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MissionReportId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PistolXpBonus")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("RifleXpBonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SentinelWeaponXpBonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SentinelXPBonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuitXpBonus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Upgrades")
                        .HasColumnType("TEXT");

                    b.Property<int>("Xp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XpBonus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MissionReportId");

                    b.ToTable("PlayerReports");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("BuildTimeInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("InternalInventoryItemType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<long>("PriceInStandardCredits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipeItemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipeItemPrettyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultItemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultItemPrettyName")
                        .HasColumnType("TEXT");

                    b.Property<long>("SkipBuildPriceInPlatinum")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.RecipeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemCountNeeded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrettyName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeItems");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.TauntHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModificationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Node")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("TauntHistoryItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.BankAccount", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Player", "Player")
                        .WithMany("BankAccounts")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.BankAccountTransaction", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.BankAccount", "BankAccount")
                        .WithMany("BankAccountTransactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.FriendshipRequest", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.InventoryBin", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Player", "Inventory")
                        .WithMany("InventoryBins")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.InventoryItem", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Player", "Player")
                        .WithMany("InventoryItems")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.InventoryItemAttachment", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.InventoryItem", "AttachedInventoryItem")
                        .WithMany()
                        .HasForeignKey("AttachedInventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WFClassic.Web.Data.Models.InventoryItem", "ParentInventoryItem")
                        .WithMany()
                        .HasForeignKey("ParentInventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachedInventoryItem");

                    b.Navigation("ParentInventoryItem");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.LoginTrackingItem", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("LoginTrackingItems")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.MetricItem", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.Mission", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Player", "Player")
                        .WithMany("Missions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.MissionReport", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Player", "Player")
                        .WithMany("MissionReports")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.PendingRecipe", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Player", "Player")
                        .WithMany("PendingRecipes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WFClassic.Web.Data.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.PersonRelationship", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.Player", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.PlayerReport", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.MissionReport", "MissionReport")
                        .WithMany("PlayerReports")
                        .HasForeignKey("MissionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissionReport");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.RecipeItem", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeComponentItems")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.TauntHistoryItem", b =>
                {
                    b.HasOne("WFClassic.Web.Data.Models.Player", "Player")
                        .WithMany("TauntHistoryItems")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("LoginTrackingItems");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.BankAccount", b =>
                {
                    b.Navigation("BankAccountTransactions");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.MissionReport", b =>
                {
                    b.Navigation("PlayerReports");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.Player", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("InventoryBins");

                    b.Navigation("InventoryItems");

                    b.Navigation("MissionReports");

                    b.Navigation("Missions");

                    b.Navigation("PendingRecipes");

                    b.Navigation("TauntHistoryItems");
                });

            modelBuilder.Entity("WFClassic.Web.Data.Models.Recipe", b =>
                {
                    b.Navigation("RecipeComponentItems");
                });
#pragma warning restore 612, 618
        }
    }
}
